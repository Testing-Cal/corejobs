name: python-browser
on: [workflow_dispatch]

jobs:
  continuous-integration:
    runs-on: ${{ vars.RUNNER_NAME_##ENVIRONMENT-NAME## }}
    environment:
      name: dev
    env:
      CI_IMAGE: ${{ vars.CI_IMAGE }}
      KUBECTL_IMAGE_VERSION: "bitnami/kubectl:1.28" #https://hub.docker.com/r/bitnami/kubectl/tags
      HELM_IMAGE_VERSION: "alpine/helm:3.8.1" #https://hub.docker.com/r/alpine/helm/tags
      OC_IMAGE_VERSION: "quay.io/openshift/origin-cli:4.9.0" #https://quay.io/repository/openshift/origin-cli?tab=tags
      SONAR_IMAGE_VERSION: "sonarsource/sonar-scanner-cli:11.0"


    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
          
      - name: Initialization
        run: |
          JSON_STRING='${{ vars.BUILD_METADATA }}'
         
          echo "REGISTRY_URL=$(echo "$JSON_STRING" | jq -r '.general.containerImagePath')" >> "$GITHUB_ENV"
          echo "BUILD_TAG=${{ github.run_number }}"  >> "$GITHUB_ENV"
          echo "ARTIFACTORY_CREDENTIALS=$(echo "$JSON_STRING" | jq -r '.general.artifactorySecret')"  >> "$GITHUB_ENV"
          echo "SONAR_CREDENTIAL_ID=$(echo "$JSON_STRING" | jq -r '.general.sonarSecret')"  >> "$GITHUB_ENV"
          echo "ARTIFACTORY=$(echo "$JSON_STRING" | jq -r '.general.artifactory')"  >> "$GITHUB_ENV"
          echo "STAGE_FLAG=$(echo "$JSON_STRING" | jq -r '.general.stageFlag')"  >> "$GITHUB_ENV"
          echo "CONTAINER_SCAN_TYPE=$(echo "$JSON_STRING" | jq -r '.general.containerScanType')"  >> "$GITHUB_ENV"
          echo "DOCKERHOST=$(echo "$JSON_STRING" | jq -r '.general.dockerHostIP')"  >> "$GITHUB_ENV"
          echo "RELEASE_NAME=$(echo "$JSON_STRING" | jq -r '.general.name')"  >> "$GITHUB_ENV"
          echo "CONTEXT=$(echo "$JSON_STRING" | jq -r '.general.contextPath')" >> "$GITHUB_ENV"
          echo "SONAR_ORG=$(echo "$JSON_STRING" | jq -r '.general.sonarOrg')" >> "$GITHUB_ENV"
          echo "SONAR_HOST=$(echo "$JSON_STRING" | jq -r '.general.sonarHost')" >> "$GITHUB_ENV"
          echo "SONAR_PROJECT_KEY=$(echo "$JSON_STRING" | jq -r '.general.sonarProjectKey')" >> "$GITHUB_ENV"
          echo "ARTIFACTORY_USER_SECRET=$(echo "$JSON_STRING" | jq -r '.general.ArtifactoryUserSecret')" >> "$GITHUB_ENV"
          echo "ARTIFACTORY_PASSWORD_SECRET=$(echo "$JSON_STRING" | jq -r '.general.ArtifactoryPasswordSecret')" >> "$GITHUB_ENV"
          echo "ARTIFACT_HOST_SECRET=$(echo "$JSON_STRING" | jq -r '.general.ArtifactoryHostSecret')" >> "$GITHUB_ENV"
          export REGISTRY_URL="$(echo "$JSON_STRING" | jq -r '.general.containerImagePath')"
          echo "DOCKER_LOGIN_URL=$(echo "$REGISTRY_URL" | cut -d'/' -f1)" >> "$GITHUB_ENV"
          echo "ACTION=$(echo "$JSON_STRING" | jq -r '.general.action')" >> "$GITHUB_ENV"

          # push to collector
          echo "TENANT_ID=$(echo "$JSON_STRING" | jq -r '.general.tenant')" >> "$GITHUB_ENV"
          echo "TARGET_URI=$(echo "$JSON_STRING" | jq -r '.general.lazsaDomainUri')" >> "$GITHUB_ENV"
          echo "AGENT_ID=$(echo "$JSON_STRING" | jq -r '.general.agentId')" >> "$GITHUB_ENV"
          echo "AGENT_API_KEY=$(echo "$JSON_STRING" | jq -r '.general.agentApiKey')" >> "$GITHUB_ENV"
          echo "DEVOPS_SETTING_ID=$(echo "$JSON_STRING" | jq -r '.general.devopsSettingId')" >> "$GITHUB_ENV"

          #promotion workflow
          echo "PROMOTE_SOURCE=$(echo "$JSON_STRING" | jq -r '.general.promoteSource')" >> "$GITHUB_ENV"
          echo "PROMOTE_SOURCE_ARTIFACTORY_USER_SECRET=$(echo "$JSON_STRING" | jq -r '.general.promoteSourceArtifactoryUserSecret')" >> "$GITHUB_ENV"
          echo "PROMOTE_SOURCE_ARTIFACTORY_PASSWORD_SECRET(echo "$JSON_STRING" | jq -r '.general.promoteSourceArtifactoryPasswordSecret')" >> "$GITHUB_ENV"
          echo "PROMOTE_SOURCE_ARTIFACTORY_TYPE=$(echo "$JSON_STRING" | jq -r '.general.promoteSourceArtifactoryType')" >> "$GITHUB_ENV"
          echo "PROMOTE_TAG=$(echo "$JSON_STRING" | jq -r '.general.promoteTag')" >> "$GITHUB_ENV"
          echo "ROLLBACK_TAG=$(echo "$JSON_STRING" | jq -r '.general.rollbackTag')" >> "$GITHUB_ENV"


          

      - name: Build
        run: |
          docker build -t "$REGISTRY_URL:$BUILD_TAG" -t "$REGISTRY_URL:latest" .

      # - name: Unit Test
      #   run: |
      #     docker run --rm --user root -v "$GITHUB_WORKSPACE":/opt/repo -w /opt/repo $CI_IMAGE /bin/sh unitTest.sh
      
      # - name: SonarQube Scan
      #   run: |
      #     docker run --rm --user root -v "$GITHUB_WORKSPACE":/opt/repo -w /opt/repo $SONAR_IMAGE_VERSION -Dsonar.python.coverage.reportPaths=coverage.xml -Dsonar.python.xunit.reportPath=testreport.xml -Dsonar.projectKey="$SONAR_PROJECT_KEY"  -Dsonar.sources=. -Dsonar.projectName="$SONAR_PROJECT_KEY" -Dsonar.host.url="$SONAR_HOST" -Dsonar.organization="$SONAR_ORG" -Dsonar.login=${{ secrets[env.SONAR_CREDENTIAL_ID] }} -Dsonar.token=${{ secrets[env.SONAR_CREDENTIAL_ID] }}

      # - name: Build Container Image
      #   run: |
      #     docker build -t "$REGISTRY_URL:$BUILD_TAG" -t "$REGISTRY_URL:latest" .
      
      - name: Setup JFrog CLI
        if: env.CONTAINER_SCAN_TYPE == 'XRAY'
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: "https://${{ env.DOCKER_LOGIN_URL }}"
          JF_ACCESS_TOKEN: ${{ secrets[env.ARTIFACTORY_PASSWORD_SECRET] }}

      - name: Container Image Scan
        if: env.CONTAINER_SCAN_TYPE == 'XRAY'
        run: jf docker scan $REGISTRY_URL:$BUILD_TAG
          
      - name: Publish Container Image
        run: |
          
          if [[ $ARTIFACTORY == "ECR" ]]
          then
            ECR_REGION=$(echo "$REGISTRY_URL" | cut -d'.' -f4)
            set +x 
            AWS_ACCESS_KEY_ID=${{ secrets[env.ARTIFACTORY_USER_SECRET] }} AWS_SECRET_ACCESS_KEY=${{ secrets[env.ARTIFACTORY_PASSWORD_SECRET] }} aws ecr get-login-password --region "$ECR_REGION" | docker login --username AWS --password-stdin $DOCKER_LOGIN_URL 
            set -x
          else
            docker login -u ${{ secrets[env.ARTIFACTORY_USER_SECRET] }} -p ${{ secrets[env.ARTIFACTORY_PASSWORD_SECRET] }} "$DOCKER_LOGIN_URL"
          fi
          
          docker push "$REGISTRY_URL:$BUILD_TAG"
          docker push "$REGISTRY_URL:latest"

      - name: Artifact Promotion 
        if: env.ACTION == 'PROMOTE'
        run: | 
          if [[ $ARTIFACTORY == "ECR" ]]
          then
            ECR_REGION=$(echo "$REGISTRY_URL" | cut -d'.' -f4)
            set +x 
            AWS_ACCESS_KEY_ID=${{ secrets[env.ARTIFACTORY_USER_SECRET] }} AWS_SECRET_ACCESS_KEY=${{ secrets[env.ARTIFACTORY_PASSWORD_SECRET] }} aws ecr get-login-password --region "$ECR_REGION" | docker login --username AWS --password-stdin $DOCKER_LOGIN_URL 
            set -x
          else
            docker login -u ${{ secrets[env.ARTIFACTORY_USER_SECRET] }} -p ${{ secrets[env.ARTIFACTORY_PASSWORD_SECRET] }} "$DOCKER_LOGIN_URL"
          fi
          PROMOTE_SOURCE_LOGIN_URL=$(echo "$PROMOTE_SOURCE" | cut -d'/' -f1)
          if [[ $PROMOTE_SOURCE_ARTIFACTORY_TYPE == "ECR" ]]
          then
            REGION=$(echo "$PROMOTE_SOURCE" | cut -d'.' -f4)
            PROMOTE_SOURCE_ECR_REGION=$(echo "$PROMOTE_SOURCE" | cut -d'.' -f4)
            set +x 
            AWS_ACCESS_KEY_ID=${{ secrets[env.PROMOTE_SOURCE_ARTIFACTORY_USER_SECRET] }} AWS_SECRET_ACCESS_KEY=${{ secrets[env.PROMOTE_SOURCE_ARTIFACTORY_PASSWORD_SECRET] }} aws ecr get-login-password --region "$PROMOTE_SOURCE_ECR_REGION" | docker login --username AWS --password-stdin $PROMOTE_SOURCE_LOGIN_URL 
            set -x
          else
            docker login -u ${{ secrets[env.PROMOTE_SOURCE_ARTIFACTORY_USER_SECRET] }} -p ${{ secrets[env.PROMOTE_SOURCE_ARTIFACTORY_PASSWORD_SECRET] }} "$PROMOTE_SOURCE_LOGIN_URL"
          fi

          docker pull $PROMOTE_SOURCE
          docker image tag $PROMOTE_SOURCE $REGISTRY_URL:$PROMOTE_TAG
          docker push $REGISTRY_URL:$PROMOTE_TAG
          echo "BUILD_TAG=$PROMOTE_TAG"  >> "$GITHUB_ENV"
          
      - name: Deploy to VM
        if: env.ACTION == 'DEPLOY' || env.ACTION == 'PROMOTE' || env.ACTION == 'ROLLBACK'
        run: |
           if [[ $ACTION == "ROLLBACK" ]]
           then
                  echo "Running Rollback"
                  export BUILD_TAG=$ROLLBACK_TAG
                  echo "Build Tag: $BUILD_TAG"
           fi
           if [[ $ARTIFACTORY != "ECR" ]]
           then
             ssh -o "StrictHostKeyChecking=no" ciuser@$DOCKERHOST "docker login -u ${{ secrets[env.ARTIFACTORY_USER_SECRET] }} -p ${{ secrets[env.ARTIFACTORY_PASSWORD_SECRET] }} "$REGISTRY_URL""
           else
             ECR_REGION=$(echo "$REGISTRY_URL" | cut -d'.' -f4)
             set +x; ssh -o "StrictHostKeyChecking=no" ciuser@$DOCKERHOST "AWS_ACCESS_KEY_ID=${{ secrets[env.ARTIFACTORY_USER_SECRET] }} AWS_SECRET_ACCESS_KEY=${{ secrets[env.ARTIFACTORY_PASSWORD_SECRET] }} aws ecr get-login-password --region "$ECR_REGION" | docker login --username AWS --password-stdin $DOCKER_LOGIN_URL " ;set -x
           fi
           
           ssh -o "StrictHostKeyChecking=no" ciuser@$DOCKERHOST "sleep 5s"
           ssh -o "StrictHostKeyChecking=no" ciuser@$DOCKERHOST "docker image prune -a -f"
           ssh -o "StrictHostKeyChecking=no" ciuser@$DOCKERHOST "docker pull "$REGISTRY_URL:$BUILD_TAG""
           ssh -o "StrictHostKeyChecking=no" ciuser@$DOCKERHOST "docker stop "$SERVICE_NAME" || true && docker rm "$SERVICE_NAME" || true"
           scp -o "StrictHostKeyChecking=no" .vaultenv ciuser@$DOCKERHOST:/home/ciuser/.vaultenv
          
           ssh -o "StrictHostKeyChecking=no" ciuser@$DOCKERHOST "docker run -d --restart always --name "$SERVICE_NAME" -p $SERVICE_PORT:$SERVICE_PORT --env-file .vaultenv -e context=$CONTEXT -e port=$SERVICE_PORT $REGISTRY_URL:$BUILD_TAG"
          
           
      - name: Destroy
        if: env.ACTION == 'DESTROY'
        run: | 
         ssh -o "StrictHostKeyChecking=no" ciuser@$DOCKERHOST "docker stop "$SERVICE_NAME" || true && docker rm "$SERVICE_NAME" || true"
         
      - name: Push to collector
        if: always()
        run: |
          echo "Workflow Run ID:${GITHUB_RUN_ID}, Workflow Run Number: ${GITHUB_RUN_NUMBER}, Workflow Name: ${GITHUB_WORKFLOW}, Github Repository: ${GITHUB_REPOSITORY}, Job Name: ${GITHUB_JOB}, Tenant ID: $TENANT_ID, Target URI: $TARGET_URI"
          if [[ $TENANT_ID != "" && $TARGET_URI != "" ]];then 
                curl -k -X POST "$TARGET_URI/collector/orchestrator/devops/details" \
                  -H 'X-TenantID: $TENANT_ID' \
                  -H 'Content-Type: application/json'\
                  -d '{
                        "workflowName": "'"${GITHUB_WORKFLOW}"'",
                        "workflowId": "'"${GITHUB_RUN_ID}"'",
                        "workflowNumber": "'"${GITHUB_RUN_ID}"'",
                        "repo": "'"${GITHUB_REPOSITORY}"'",
                        "agentId": "'"${AGENT_ID}"'",
                        "devopsConfigId": "'"${DEVOPS_SETTING_ID}"'",
                        "agentApiKey": "'"${AGENT_API_KEY}"'",
                        "buildNumber": "'"${GITHUB_RUN_NUMBER}"'"
                      }'
                echo "push to collector stage Completed"
          fi


          
      
        
      
