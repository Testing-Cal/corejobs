name: deploy-to-vm

on: [workflow_dispatch]

jobs:
  deploy:
    runs-on: ec2-deploy
    environment:
      name: 'dev'
    env:
      HELM_IMAGE_VERSION: "alpine/helm:3.8.1" #https://hub.docker.com/r/alpine/helm/tags
      OC_IMAGE_VERSION: "quay.io/openshift/origin-cli:4.9.0" #https://quay.io/repository/openshift/origin-cli?tab=tags


    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
          
      - name: Initialization
        run: |
          sudo apt install yq -y 
          JSON_STRING='${{ vars.JUPYTER_SETUP_JOB_VARS }}'
         
         
          echo "DOCKERHOST=$(echo "$JSON_STRING" | jq -r '.general.dockerHostIP')" >> "$GITHUB_ENV"
          #echo "BUILD_TAG=${{ github.run_number }}"  >> "$GITHUB_ENV"
          
          echo "PROJECT_REPO=$(echo "$JSON_STRING" | jq -r '.general.projectRepo')" >> "$GITHUB_ENV"
          echo "TOKEN=$(echo "$JSON_STRING" | jq -r '.general.jupyTokenSecretId')"  >> "$GITHUB_ENV"
          echo "CONTEXT_PATH=$(echo "$JSON_STRING" | jq -r '.general.contextPath')"  >> "$GITHUB_ENV"
          echo "GET_REPOSITORY_USERNAME_SECRET_ID=$(echo "$JSON_STRING" | jq -r '.general.gitRepoUsernameSecretId')"  >> "$GITHUB_ENV"
          echo "GET_REPOSITORY_PASSWORD_SECRET_ID=$(echo "$JSON_STRING" | jq -r '.general.gitRepoPasswordSecretId')"  >> "$GITHUB_ENV"
          echo "BRANCH_NAME=$(echo "$JSON_STRING" | jq -r '.general.branchName')"  >> "$GITHUB_ENV"
          echo "JUPYTER_PORT=$(echo "$JSON_STRING" | jq -r '.general.branchName')"  >> "$GITHUB_ENV"
          
      - name: Setup Jupyterlab
        run: |
          sh -o "StrictHostKeyChecking=no" ciuser@$DOCKERHOST "
                        curl -k -O https://pkg.jenkins.io/redhat-stable/jenkins.io.key
                        sudo rpm --import jenkins.io.key
                        #sudo chmod -R 777 /usr/local
                        #sudo chmod -R 777 /etc/environment
                        sudo yum update --skip-broken --setopt=protected_multilib=false -y
                        sudo chown -R ${USER}:${USER} /opt
                        mkdir -p /opt/models
					"
          ssh -o "StrictHostKeyChecking=no" ciuser@$DOCKERHOST "
                        sudo rm -rf /opt/conda 
                        wget -nv https://repo.anaconda.com/miniconda/Miniconda3-py311_24.9.2-0-Linux-x86_64.sh -O ~/miniconda.sh                 
                        sudo mkdir -p /opt/conda
                        sudo chown -R ${USER}:${USER} /opt/conda
                        bash ~/miniconda.sh  -bup /opt/conda
                        eval "$(/opt/conda/bin/conda shell.bash hook)"
                        conda init
                        rm ~/miniconda.sh
					"
          ssh -o "StrictHostKeyChecking=no" ciuser@$DOCKERHOST "
                        pip install jupyterlab==4.3.4
                        pip install jupyterlab_git==0.50.2
                        pip install plotly==5.24.1
                        pip install ipywidgets
					"
          ssh -n -o "StrictHostKeyChecking=no" ciuser@$DOCKERHOST "nohup jupyter lab --ip=* --NotebookApp.token=${TOKEN} --NotebookApp.base_url=${CONTEXT_PATH} --ServerApp.allow_password_change=True --port=${JUPYTER_PORT}>/dev/null 2>&1 &"
          scp -o "StrictHostKeyChecking=no" ./auto-git.sh ciuser@$DOCKERHOST:./
          PROJECT_REPO_DIR=`basename "${PROJECT_REPO}" | cut -d'.' -f1`
          if [[ $GET_REPOSITORY_USERNAME_SECRET_ID != 'null' && $GET_REPOSITORY_PASSWORD_SECRET_ID != 'null' ]]; then
          
            ssh -o "StrictHostKeyChecking=no" ciuser@$DOCKERHOST "
                            sudo yum install expect -y
                            export PROJECT_REPO='${PROJECT_REPO}'
                            export GIT_REPOSITORY_USERNAME='${{ secrets[env.gitRepoUsernameSecretId] }}'
                            export GIT_REPOSITORY_TOKEN='${{ secrets[env.gitRepoPasswordSecretId] }}'
                            rm -rf ${PROJECT_REPO_DIR}  
                            chmod +x ./auto-git.sh
                            ./auto-git.sh clone "${PROJECT_REPO}"
                            cd "${PROJECT_REPO_DIR}"
                            ../auto-git.sh checkout "${BRANCH_NAME}"
                            cd ..
                            "
          else
              print "GET_REPOSITORY_USERNAME_SECRET_ID or GET_REPOSITORY_PASSWORD_SECRET_ID is not provided. Will use PROJECT_REPO directly to clone repository"
              sh 'ssh -o "StrictHostKeyChecking=no" ciuser@$DOCKERHOST "git clone $PROJECT_REPO"'
          fi
          ssh -o "StrictHostKeyChecking=no" ciuser@$DOCKERHOST "
                        pip install -U pycodestyle==2.5.0
                        pip install -U pylint==2.4.4
                        pip install dash==2.5.0
                        pip install -U dotmap==1.3.30
                        pip install -U sqlalchemy==1.4.54
                        pip install -U snowflake-sqlalchemy==1.7.3
                        pip install databricks-sql-connector[sqlalchemy]==2.9.3
                        pip install pymysql
                        pip install psycopg2-binary

                        # Commented below because we are not currenlty actively supporting postgres
                        # sudo yum install postgresql-devel -y
                        # pip install psycopg2
                        curl -O https://yum.oracle.com/repo/OracleLinux/OL8/oracle/instantclient21/x86_64/getPackage/oracle-instantclient-basic-21.1.0.0.0-1.x86_64.rpm
                        sudo yum localinstall oracle-instantclient-basic-21.1.0.0.0-1.x86_64.rpm -y
                        pip install cx_Oracle
                        pip install pyodbc

                        sudo curl https://packages.microsoft.com/config/rhel/7/prod.repo | sudo tee /etc/yum.repos.d/microsoft.repo
                        sudo ACCEPT_EULA=Y yum install -y msodbcsql17
					"
          ssh -o "StrictHostKeyChecking=no" ciuser@$DOCKERHOST "cd ${PROJECT_REPO_DIR}; if [ -f requirements.txt ]; then pip install --force-reinstall -r requirements.txt; fi"
          
          
